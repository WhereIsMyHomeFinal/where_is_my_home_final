{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport jwtDecode from \"jwt-decode\";\nimport router from \"@/router\";\nimport { login, findById, tokenRegeneration, logout } from \"@/api/member\";\nconst memberStore = {\n  namespaced: true,\n  state: {\n    isLogin: false,\n    isLoginError: false,\n    userInfo: null,\n    isValidToken: false\n  },\n  getters: {\n    checkUserInfo: function (state) {\n      return state.userInfo;\n    },\n    checkToken: function (state) {\n      return state.isValidToken;\n    }\n  },\n  mutations: {\n    SET_IS_LOGIN: (state, isLogin) => {\n      state.isLogin = isLogin;\n    },\n    SET_IS_LOGIN_ERROR: (state, isLoginError) => {\n      state.isLoginError = isLoginError;\n    },\n    SET_IS_VALID_TOKEN: (state, isValidToken) => {\n      state.isValidToken = isValidToken;\n    },\n    SET_USER_INFO: (state, userInfo) => {\n      state.isLogin = true;\n      state.userInfo = userInfo;\n    }\n  },\n  actions: {\n    async userConfirm({\n      commit\n    }, user) {\n      await login(user, ({\n        data\n      }) => {\n        if (data.message === \"success\") {\n          let accessToken = data[\"access-token\"];\n          let refreshToken = data[\"refresh-token\"];\n          // console.log(\"login success token created!!!! >> \", accessToken, refreshToken);\n          commit(\"SET_IS_LOGIN\", true);\n          commit(\"SET_IS_LOGIN_ERROR\", false);\n          commit(\"SET_IS_VALID_TOKEN\", true);\n          sessionStorage.setItem(\"access-token\", accessToken);\n          sessionStorage.setItem(\"refresh-token\", refreshToken);\n        } else {\n          commit(\"SET_IS_LOGIN\", false);\n          commit(\"SET_IS_LOGIN_ERROR\", true);\n          commit(\"SET_IS_VALID_TOKEN\", false);\n        }\n      }, error => {\n        console.log(error);\n      });\n    },\n    async getUserInfo({\n      commit,\n      dispatch\n    }, token) {\n      let decodeToken = jwtDecode(token);\n      console.log(\"2. getUserInfo() decodeToken :: \", decodeToken);\n      await findById(decodeToken.userid, ({\n        data\n      }) => {\n        if (data.message === \"success\") {\n          commit(\"SET_USER_INFO\", data.userInfo);\n          // console.log(\"3. getUserInfo data >> \", data);\n        } else {\n          console.log(\"유저 정보 없음!!!!\");\n        }\n      }, async error => {\n        console.log(\"getUserInfo() error code [토큰 만료되어 사용 불가능.] ::: \", error.response.status);\n        commit(\"SET_IS_VALID_TOKEN\", false);\n        await dispatch(\"tokenRegeneration\");\n      });\n    },\n    async tokenRegeneration({\n      commit,\n      state\n    }) {\n      console.log(\"토큰 재발급 >> 기존 토큰 정보 : {}\", sessionStorage.getItem(\"access-token\"));\n      await tokenRegeneration(JSON.stringify(state.userInfo), ({\n        data\n      }) => {\n        if (data.message === \"success\") {\n          let accessToken = data[\"access-token\"];\n          console.log(\"재발급 완료 >> 새로운 토큰 : {}\", accessToken);\n          sessionStorage.setItem(\"access-token\", accessToken);\n          commit(\"SET_IS_VALID_TOKEN\", true);\n        }\n      }, async error => {\n        // HttpStatus.UNAUTHORIZE(401) : RefreshToken 기간 만료 >> 다시 로그인!!!!\n        if (error.response.status === 401) {\n          console.log(\"갱신 실패\");\n          // 다시 로그인 전 DB에 저장된 RefreshToken 제거.\n          await logout(state.userInfo.userid, ({\n            data\n          }) => {\n            if (data.message === \"success\") {\n              console.log(\"리프레시 토큰 제거 성공\");\n            } else {\n              console.log(\"리프레시 토큰 제거 실패\");\n            }\n            alert(\"RefreshToken 기간 만료!!! 다시 로그인해 주세요.\");\n            commit(\"SET_IS_LOGIN\", false);\n            commit(\"SET_USER_INFO\", null);\n            commit(\"SET_IS_VALID_TOKEN\", false);\n            router.push({\n              name: \"login\"\n            });\n          }, error => {\n            console.log(error);\n            commit(\"SET_IS_LOGIN\", false);\n            commit(\"SET_USER_INFO\", null);\n          });\n        }\n      });\n    },\n    async userLogout({\n      commit\n    }, userid) {\n      await logout(userid, ({\n        data\n      }) => {\n        if (data.message === \"success\") {\n          commit(\"SET_IS_LOGIN\", false);\n          commit(\"SET_USER_INFO\", null);\n          commit(\"SET_IS_VALID_TOKEN\", false);\n        } else {\n          console.log(\"유저 정보 없음!!!!\");\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n  }\n};\nexport default memberStore;","map":{"version":3,"names":["jwtDecode","router","login","findById","tokenRegeneration","logout","memberStore","namespaced","state","isLogin","isLoginError","userInfo","isValidToken","getters","checkUserInfo","checkToken","mutations","SET_IS_LOGIN","SET_IS_LOGIN_ERROR","SET_IS_VALID_TOKEN","SET_USER_INFO","actions","userConfirm","commit","user","data","message","accessToken","refreshToken","sessionStorage","setItem","error","console","log","getUserInfo","dispatch","token","decodeToken","userid","response","status","getItem","JSON","stringify","alert","push","name","userLogout"],"sources":["C:/SSAFY/heej_workspace/관통PJT/where_is_my_home_final/where_is_my_home_v0/src/store/modules/memberStore.js"],"sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport router from \"@/router\";\r\nimport { login, findById, tokenRegeneration, logout } from \"@/api/member\";\r\n\r\nconst memberStore = {\r\n  namespaced: true,\r\n  state: {\r\n    isLogin: false,\r\n    isLoginError: false,\r\n    userInfo: null,\r\n    isValidToken: false,\r\n  },\r\n  getters: {\r\n    checkUserInfo: function (state) {\r\n      return state.userInfo;\r\n    },\r\n    checkToken: function (state) {\r\n      return state.isValidToken;\r\n    },\r\n  },\r\n  mutations: {\r\n    SET_IS_LOGIN: (state, isLogin) => {\r\n      state.isLogin = isLogin;\r\n    },\r\n    SET_IS_LOGIN_ERROR: (state, isLoginError) => {\r\n      state.isLoginError = isLoginError;\r\n    },\r\n    SET_IS_VALID_TOKEN: (state, isValidToken) => {\r\n      state.isValidToken = isValidToken;\r\n    },\r\n    SET_USER_INFO: (state, userInfo) => {\r\n      state.isLogin = true;\r\n      state.userInfo = userInfo;\r\n    },\r\n  },\r\n  actions: {\r\n    async userConfirm({ commit }, user) {\r\n      await login(\r\n        user,\r\n        ({ data }) => {\r\n          if (data.message === \"success\") {\r\n            let accessToken = data[\"access-token\"];\r\n            let refreshToken = data[\"refresh-token\"];\r\n            // console.log(\"login success token created!!!! >> \", accessToken, refreshToken);\r\n            commit(\"SET_IS_LOGIN\", true);\r\n            commit(\"SET_IS_LOGIN_ERROR\", false);\r\n            commit(\"SET_IS_VALID_TOKEN\", true);\r\n            sessionStorage.setItem(\"access-token\", accessToken);\r\n            sessionStorage.setItem(\"refresh-token\", refreshToken);\r\n          } else {\r\n            commit(\"SET_IS_LOGIN\", false);\r\n            commit(\"SET_IS_LOGIN_ERROR\", true);\r\n            commit(\"SET_IS_VALID_TOKEN\", false);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    },\r\n    async getUserInfo({ commit, dispatch }, token) {\r\n      let decodeToken = jwtDecode(token);\r\n      console.log(\"2. getUserInfo() decodeToken :: \", decodeToken);\r\n      await findById(\r\n        decodeToken.userid,\r\n        ({ data }) => {\r\n          if (data.message === \"success\") {\r\n            commit(\"SET_USER_INFO\", data.userInfo);\r\n            // console.log(\"3. getUserInfo data >> \", data);\r\n          } else {\r\n            console.log(\"유저 정보 없음!!!!\");\r\n          }\r\n        },\r\n        async (error) => {\r\n          console.log(\"getUserInfo() error code [토큰 만료되어 사용 불가능.] ::: \", error.response.status);\r\n          commit(\"SET_IS_VALID_TOKEN\", false);\r\n          await dispatch(\"tokenRegeneration\");\r\n        }\r\n      );\r\n    },\r\n    async tokenRegeneration({ commit, state }) {\r\n      console.log(\"토큰 재발급 >> 기존 토큰 정보 : {}\", sessionStorage.getItem(\"access-token\"));\r\n      await tokenRegeneration(\r\n        JSON.stringify(state.userInfo),\r\n        ({ data }) => {\r\n          if (data.message === \"success\") {\r\n            let accessToken = data[\"access-token\"];\r\n            console.log(\"재발급 완료 >> 새로운 토큰 : {}\", accessToken);\r\n            sessionStorage.setItem(\"access-token\", accessToken);\r\n            commit(\"SET_IS_VALID_TOKEN\", true);\r\n          }\r\n        },\r\n        async (error) => {\r\n          // HttpStatus.UNAUTHORIZE(401) : RefreshToken 기간 만료 >> 다시 로그인!!!!\r\n          if (error.response.status === 401) {\r\n            console.log(\"갱신 실패\");\r\n            // 다시 로그인 전 DB에 저장된 RefreshToken 제거.\r\n            await logout(\r\n              state.userInfo.userid,\r\n              ({ data }) => {\r\n                if (data.message === \"success\") {\r\n                  console.log(\"리프레시 토큰 제거 성공\");\r\n                } else {\r\n                  console.log(\"리프레시 토큰 제거 실패\");\r\n                }\r\n                alert(\"RefreshToken 기간 만료!!! 다시 로그인해 주세요.\");\r\n                commit(\"SET_IS_LOGIN\", false);\r\n                commit(\"SET_USER_INFO\", null);\r\n                commit(\"SET_IS_VALID_TOKEN\", false);\r\n                router.push({ name: \"login\" });\r\n              },\r\n              (error) => {\r\n                console.log(error);\r\n                commit(\"SET_IS_LOGIN\", false);\r\n                commit(\"SET_USER_INFO\", null);\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n    },\r\n    async userLogout({ commit }, userid) {\r\n      await logout(\r\n        userid,\r\n        ({ data }) => {\r\n          if (data.message === \"success\") {\r\n            commit(\"SET_IS_LOGIN\", false);\r\n            commit(\"SET_USER_INFO\", null);\r\n            commit(\"SET_IS_VALID_TOKEN\", false);\r\n          } else {\r\n            console.log(\"유저 정보 없음!!!!\");\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    },\r\n  },\r\n};\r\n\r\nexport default memberStore;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}